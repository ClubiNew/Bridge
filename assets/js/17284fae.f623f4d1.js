"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[402],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return g}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(r),g=o,m=u["".concat(c,".").concat(g)]||u[g]||p[g]||a;return r?t.createElement(m,i(i({ref:n},d),{},{components:r})):t.createElement(m,i({ref:n},d))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5555:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={sidebar_position:3},c="Example",s={unversionedId:"example",id:"example",isDocsHomePage:!1,title:"Example",description:"game.ServerStorage.Services.RandomService.lua:",source:"@site/docs/example.md",sourceDirName:".",slug:"/example",permalink:"/Bridge/docs/example",editUrl:"https://github.com/Minstrix/Bridge/edit/master/docs/example.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/Bridge/docs/installation"}},d=[],p={toc:d};function u(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"game.ServerStorage.Services.RandomService.lua:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Bridge = require(ReplicatedStorage.Bridge)\n\nlocal RandomService = Bridge.newService(script.Name)\n\nfunction RandomService:Construct()\n    self.Random = Random.new(tick())\nend\n\nfunction RandomService:Range(min, max)\n    return self.Random:NextInteger(min, max)\nend\n\nreturn RandomService\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"game.ServerStorage.Services.PointsService.lua:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\nlocal Bridge = require(ReplicatedStorage.Bridge)\nlocal PointsService = Bridge.newService(script.Name)\n\nfunction PointsService:Construct()\n    self.PlayerPoints = {}\n\n    Players.PlayerAdded:Connect(function(Player)\n        self.PlayerPoints[Player.UserId] = 0\n    end)\n\n    for _, Player in pairs(Players:GetPlayers()) do\n        self.PlayerPoints[Player.UserId] = 0\n    end\nend\n\nPointsService.Bridge.PointsChanged = Bridge.newRemote()\nfunction PointsService:Deploy()\n    local RandomService = Bridge.toService("RandomService")\n    while task.wait(1) do\n        for _, Player in pairs(Players:GetPlayers()) do\n            self.PlayerPoints[Player.UserId] += RandomService:Range(1, 100)\n            self.Bridge.PointsChanged:FireClient(Player, self:GetPoints(Player))\n        end\n    end\nend\n\nfunction PointsService:GetPoints(Player)\n    return self.PlayerPoints[Player.UserId]\nend\n\nfunction PointsService.Bridge:GetPoints(Player)\n    return self:GetPoints(Player)\nend\n\nBridge.addInboundMiddleware(PointsService, function(serviceName, methodName, args)\n    print("The", methodName, "method of", serviceName, "was called with args:", args)\n    return args\nend)\n\nBridge.addOutboundMiddleware(PointsService, function(serviceName, methodName, args)\n    print("The", methodName, "method of", serviceName, "returned args:", args)\n    return args\nend)\n\nreturn PointsService\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Script:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal ServerStorage = game:GetService("ServerStorage")\nlocal Bridge = require(ReplicatedStorage.Bridge)\n\nfor _, Service in pairs(ServerStorage.Services:GetChildren()) do\n    require(Service)\nend\n\nBridge.deploy(true)\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"game.ReplicatedStorage.Controllers.PointsController.lua:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Bridge = require(ReplicatedStorage.Bridge)\n\nlocal PointsController = Bridge.newController(script.Name)\nlocal PointsService = Bridge.toService("PointsService")\n\nfunction PointsController:Construct()\n    self.Points = PointsService:GetPoints()\n    self.Updated = Bridge.newSignal()\n    PointsService.PointsChanged:Connect(function(newPoints)\n        self.Points = newPoints\n        self.Updated:Fire(newPoints)\n    end)\nend\n\nfunction PointsController:GetPoints()\n    return self.Points\nend\n\nreturn PointsController\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"game.ReplicatedStorage.Controllers.OtherController.lua:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Bridge = require(ReplicatedStorage.Bridge)\n\nlocal OtherController = Bridge.newController(script.Name)\n\nfunction OtherController:Deploy()\n    local PointsController = Bridge.toController("PointsController")\n    print(PointsController:GetPoints())\n    PointsController.Updated:Connect(function(newPoints)\n        print(newPoints)\n    end)\nend\n\nreturn OtherController\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"LocalScript:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Bridge = require(ReplicatedStorage.Bridge)\n\nfor _, Controller in pairs(ReplicatedStorage.Controllers:GetChildren()) do\n    require(Controller)\nend\n\nBridge.addGlobalInboundMiddleware(function(controllerName, methodName, args)\n    print("The", methodName, "method of", controllerName, "was called with args:", args)\n    return args\nend)\n\nBridge.deploy(true)\n')))}u.isMDXComponent=!0}}]);