"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[657],{36421:function(e){e.exports=JSON.parse('{"functions":[{"name":"add","desc":"Adds a new hook for the provided class and [CollectionService](https://developer.roblox.com/en-us/api-reference/class/CollectionService) tag.\\n:::note\\nIt is recommended that you use `script.Name` as your collection tag.\\n:::","params":[{"name":"collectionTag","desc":"","lua_type":"string"},{"name":"hook","desc":"","lua_type":"Hook"}],"returns":[],"function_type":"static","source":{"line":62,"path":"src/HookManager.lua"}}],"properties":[],"types":[{"name":"Hook","desc":"Hooks are used to bind to [CollectionService](https://developer.roblox.com/en-us/api-reference/class/CollectionService) tags. When the tag specified in [`HookManager.add()`](/api/HookManager#add) is added to an instance, a new copy of the Hook is created, the `Instance` and [`Janitor`](https://howmanysmall.github.io/Janitor/api/Janitor) properties are set, and the `Attach` method is called. When the instance is removed, the [`Janitor`](https://howmanysmall.github.io/Janitor/api/Janitor)\'s clean-up method will be called.\\n\\nSee the [Janitor docs](https://howmanysmall.github.io/Janitor/api/Janitor) for more information on using Janitors.","fields":[{"name":"Attach","lua_type":"(Hook) -> ()","desc":""},{"name":"Janitor","lua_type":"Janitor","desc":""},{"name":"Instance","lua_type":"Instance","desc":""},{"name":"...","lua_type":"any","desc":""}],"source":{"line":48,"path":"src/HookManager.lua"}}],"name":"HookManager","desc":"The hook manager allows you to create new [hooks](/api/HookManager#Hook).\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\nlocal Bridge = require(ReplicatedStorage.Packages.Bridge)\\n\\nlocal PartHook = {}\\n\\nfunction PartHook:Attach()\\n    print(self.Instance, \\"got added!\\")\\n\\n    local debounce = false\\n    self.Janitor:Add(self.Instance.Touched:Connect(function()\\n        if not debounce then\\n            debounce = true\\n            self.Instance.BrickColor = BrickColor.Random()\\n            task.wait(0.1)\\n            debounce = false\\n        end\\n    end))\\n\\n    self.Janitor:Add(function()\\n        print(self.Instance, \\"got removed!\\")\\n    end)\\nend\\n\\nBridge.Hooks.add(\\"PartHook\\", PartHook)\\n```","source":{"line":31,"path":"src/HookManager.lua"}}')}}]);