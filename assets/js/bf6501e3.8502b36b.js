"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[946],{41866:function(e){e.exports=JSON.parse('{"functions":[{"name":"add","desc":":::note\\nIt is recommended that you use `script.Name` as your service name.\\n:::","params":[{"name":"serviceName","desc":"","lua_type":"string"},{"name":"service","desc":"","lua_type":"Service"}],"returns":[],"function_type":"static","source":{"line":84,"path":"src/ServiceManager.lua"}},{"name":"get","desc":":::caution\\nThis method will yield until [`ServiceManager.start()`](/api/ServiceManager#start) is called and services have initialized. Using it in a service during initialization may cause an infinite yield!\\n:::","params":[{"name":"serviceName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Service"}],"function_type":"static","yields":true,"source":{"line":100,"path":"src/ServiceManager.lua"}},{"name":"start","desc":"Runs all of the service life cycle methods and makes them accessible via [`ServiceManager.get()`](/api/ServiceManager#get). Set the `verbose` parameter to `true` to print a message as each service is started.\\n:::caution\\nOnce this method has been called, you will not longer be able to [add new services](/api/ServiceManager#add)!\\n:::","params":[{"name":"verbose","desc":"","lua_type":"boolean?"}],"returns":[],"function_type":"static","source":{"line":118,"path":"src/ServiceManager.lua"}}],"properties":[],"types":[{"name":"Service","desc":"Services are essentially just tables with two optional [life cycle methods](/docs/lifecycle). As such, you can store anything in them that could go in a normal table.\\n:::note\\nIf you do not need either life cycle method, it is recommended you use a standard module instead of a service.\\n:::","fields":[{"name":"OnInit","lua_type":"(Service) -> () | nil","desc":""},{"name":"OnStart","lua_type":"(Service) -> () | nil","desc":""},{"name":"...","lua_type":"any","desc":""}],"source":{"line":69,"path":"src/ServiceManager.lua"}}],"name":"ServiceManager","desc":"The service manager allows you to create new [services](/api/ServiceManager#Service).\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\nlocal Bridge = require(ReplicatedStorage.Packages.Bridge)\\n\\n-- In ServiceA.lua\\n\\nlocal ServiceA = {}\\n\\nfunction ServiceA:OnInit()\\n    print(\\"Initialized!\\")\\n    self.SomeVariable = \\"Some string\\"\\nend\\n\\nfunction ServiceA:OnStart()\\n    print(\\"Started!\\")\\nend\\n\\nfunction ServiceA:SomeMethod()\\n    print(self.SomeVariable)\\nend\\n\\nBridge.Services.add(\\"ServiceA\\", ServiceA)\\n\\n-- In ServiceB.lua\\n\\nlocal ServiceB = {}\\n\\nfunction ServiceB:OnInit()\\n    print(\\"Initialized!\\")\\nend\\n\\nfunction ServiceB:OnStart()\\n    print(\\"Started!\\")\\n\\n    local ServiceA = Bridge.Services.get(\\"ServiceA\\")\\n    ServiceA:SomeMethod() --\x3e \\"Some string\\"\\nend\\n\\nBridge.Services.add(\\"ServiceB\\", ServiceB)\\n\\n-- In a script\\n\\nBridge.Services.start()\\n```","source":{"line":49,"path":"src/ServiceManager.lua"}}')}}]);