"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[484],{28404:e=>{e.exports=JSON.parse('{"functions":[{"name":"first","desc":"Returns a key/value pair from the given table that returns `true` when passed to the provided filter function.","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"},{"name":"filter","desc":"","lua_type":"(key: K, value: V) -> boolean"}],"returns":[{"desc":"","lua_type":"K"},{"desc":"","lua_type":"V"}],"function_type":"static","source":{"line":8,"path":"packages/table/Generic.lua"}},{"name":"filter","desc":"Returns a new table without key/value pairs that return `false` when passed to the given filter function.","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"},{"name":"filter","desc":"","lua_type":"(key: K, value: V) -> boolean"}],"returns":[{"desc":"","lua_type":"{ [K]: V }\\n"}],"function_type":"static","source":{"line":20,"path":"packages/table/Generic.lua"}},{"name":"map","desc":"Returns a new table where `newTable[key] = map(key, oldTable[key])`.","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"},{"name":"map","desc":"","lua_type":"(key: K, value: V) -> any"}],"returns":[{"desc":"","lua_type":"{ [K]: any }\\n"}],"function_type":"static","source":{"line":36,"path":"packages/table/Generic.lua"}},{"name":"reduce","desc":"Calls the provided function for each element of a table with the previous result and the current element as arguments, starting with the `initialValue` as the previous result.\\n\\n```lua\\nlocal sum = Table.reduce({1, 2, 3}, 0, function(accumulator, index, value)\\n    return accumulator + value\\nend)\\n\\nprint(sum) --\x3e 6\\n```","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"},{"name":"initialValue","desc":"","lua_type":"any"},{"name":"reduce","desc":"","lua_type":"(accumulator: any, key: K, value: V) -> any\\n"}],"returns":[{"desc":"the result of the final function call","lua_type":"any"}],"function_type":"static","source":{"line":60,"path":"packages/table/Generic.lua"}},{"name":"sum","desc":"Returns the sum of the values in the given table.","params":[{"name":"tbl","desc":"","lua_type":"{ [any]: number }"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":78,"path":"packages/table/Generic.lua"}},{"name":"max","desc":"Returns the maximum value in the given table, or `nil` if the table is empty.","params":[{"name":"tbl","desc":"","lua_type":"{ [any]: number }"}],"returns":[{"desc":"","lua_type":"number?\\n"}],"function_type":"static","source":{"line":88,"path":"packages/table/Generic.lua"}},{"name":"min","desc":"Returns the minimum value in the given table, or `nil` if the table is empty.","params":[{"name":"tbl","desc":"","lua_type":"{ [any]: number }"}],"returns":[{"desc":"","lua_type":"number?\\n"}],"function_type":"static","source":{"line":102,"path":"packages/table/Generic.lua"}},{"name":"clone","desc":"Clones the key/value pairs of the given table into a new table.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"deep","desc":"defaults to `false`, will recursively clone sub-tables if `true`","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"table\\n"}],"function_type":"static","source":{"line":117,"path":"packages/table/Generic.lua"}},{"name":"pairs","desc":"Returns the key/value pairs of the given table.","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"}],"returns":[{"desc":"","lua_type":"{ { key: K, value: V } }\\n"}],"function_type":"static","source":{"line":135,"path":"packages/table/Generic.lua"}},{"name":"keys","desc":"Returns an array of the given table\'s keys.","params":[{"name":"tbl","desc":"","lua_type":"{ [T]: any }"}],"returns":[{"desc":"","lua_type":"{ T }\\n"}],"function_type":"static","source":{"line":150,"path":"packages/table/Generic.lua"}},{"name":"values","desc":"Returns an array of the given table\'s values.\\n:::caution\\nWhen called on a non-array table, this will return an array table. When called on a table that is already an array, the returned table will have the same keys, but values may be at different indices than they previously were.\\n:::","params":[{"name":"tbl","desc":"","lua_type":"{ [any]: T }"}],"returns":[{"desc":"","lua_type":"{ T }\\n"}],"function_type":"static","source":{"line":164,"path":"packages/table/Generic.lua"}},{"name":"all","desc":"Returns `true` if all elements return `true` when passed to the provided filter function.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"filter","desc":"","lua_type":"(key: any, value: any) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":175,"path":"packages/table/Generic.lua"}},{"name":"random","desc":"Behaves the same as [Array.random], but for non-array tables with potentially non-numeric keys.","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"}],"returns":[{"desc":"","lua_type":"K"},{"desc":"","lua_type":"V"}],"function_type":"static","source":{"line":24,"path":"packages/table/init.lua"}},{"name":"randomWeighted","desc":"Behaves the same as [Array.randomWeighted], but for non-array tables with potentially non-numeric keys.","params":[{"name":"tbl","desc":"","lua_type":"{ [K]: V }"},{"name":"weight","desc":"","lua_type":"(key: K, value: V) -> number"}],"returns":[{"desc":"","lua_type":"K"},{"desc":"","lua_type":"V"}],"function_type":"static","source":{"line":32,"path":"packages/table/init.lua"}}],"properties":[{"name":"Array","desc":"A collection of functions specifically for array tables.","lua_type":"Array","readonly":true,"source":{"line":19,"path":"packages/table/init.lua"}}],"types":[],"name":"Table","desc":"`Table = \\"minstrix/table@^0.1\\"`\\n\\nA collection of functions for tables.\\n\\n:::note\\nAll functions except [Array.slice] will create new tables or otherwise not mutate the original table.\\n:::","source":{"line":11,"path":"packages/table/init.lua"}}')}}]);