[{"title":"BridgeClient","type":0,"sectionRef":"#","url":"api/BridgeClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#types","content":" "},{"title":"Controller​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#Controller","content":"&lt;/&gt; interface Controller { Construct: function? Deploy: function? ...: Signal | function | any } The construct function is run during deployment for each service asynchronously. The deploy function is run during deployment for all services synchronously. It is safe to access other services after the construct function has run.  "},{"title":"MiddlewareFunction​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#MiddlewareFunction","content":"&lt;/&gt; type MiddlewareFunction = ( controllerName: string, methodName: string, args: any ) → any All middleware functions are given the controller name, method name and the arguments being passed to or returned from the method. To block the method from running or returning, simply throw an error. The middleware should return the arguments with any changes to be used by other middleware and the method. "},{"title":"Functions​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#functions","content":" "},{"title":"newSignal​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#newSignal","content":"&lt;/&gt; BridgeClient.newSignal() → Signal   "},{"title":"newController​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#newController","content":"&lt;/&gt; BridgeClient.newController(name: string) → Controller   "},{"title":"toController​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#toController","content":"&lt;/&gt; BridgeClient.toController(controllerName: string) → Controller Get another controller to access it's methods. Must run BridgeClient.Deploy() first.  "},{"title":"toService​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#toService","content":"&lt;/&gt; BridgeClient.toService(serviceName: string) → Service "},{"title":"Types","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient##","content":""},{"title":"​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#Service","content":"interface Service { ...: Remote | function }  Use to access the remotes and methods within the Bridge of a service. Safe to call immediately, but may yield if the server has not finished deploying.  "},{"title":"addGlobalInboundMiddleware​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#addGlobalInboundMiddleware","content":"&lt;/&gt; BridgeClient.addGlobalInboundMiddleware(middleware: MiddlewareFunction) → () Add global inbound middleware, which will run before any method of any controller is called. Note that global inbound middleware always runs first.  "},{"title":"addGlobalOutboundMiddleware​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#addGlobalOutboundMiddleware","content":"&lt;/&gt; BridgeClient.addGlobalOutboundMiddleware(middleware: MiddlewareFunction) → () Add global outbound middleware, which will run after any method of any controller is called. Note that global outbound middleware always runs last.  "},{"title":"addInboundMiddleware​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#addInboundMiddleware","content":"&lt;/&gt; BridgeClient.addInboundMiddleware( Controller: Controller, middleware: MiddlewareFunction ) → () Add inbound middleware to the provided controller, which will run before any method of that controller is called.  "},{"title":"addOutboundMiddleware​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#addOutboundMiddleware","content":"&lt;/&gt; BridgeClient.addOutboundMiddleware( Controller: Controller, middleware: MiddlewareFunction ) → () Add outbound middleware to the provided controller, which will run after any method of that controller is called.  "},{"title":"deploy​","type":1,"pageTitle":"BridgeClient","url":"api/BridgeClient#deploy","content":"&lt;/&gt; BridgeClient.deploy(verbose: boolean?) → () Initialize, construct and deploy all controllers. "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: any) → () Fires the signal with the given arguments.  "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"&lt;/&gt; Signal:Connect(f: function) → RBXScriptConnection  Connect the signal to the provided function.  "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"&lt;/&gt; Signal:Wait() → any Waits for the signal to be fired and returns the arguments it was fired with.  "},{"title":"Destroy​","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"&lt;/&gt; Signal:Destroy() → () Destroys the Signal. The Signal cannot be used after this is called. "},{"title":"About","type":0,"sectionRef":"#","url":"docs/intro","content":"About Bridge is a Roblox game framework based on service-controller architecture. Documentation is work-in-progress as Bridge is in an early development phase. You can learn more by reading the API and taking a look at the example.","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/installation","content":"Installation Option 1: Copy the source files directly from the GitHub Repository into your Rojo project. Option 2: Download the latest .rbxm file in releases. Option 3: Add Bridge = &quot;minstrix/bridge@^0.1&quot; to your Wally dependencies.","keywords":""},{"title":"Remote","type":0,"sectionRef":"#","url":"api/Remote","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Remote","url":"api/Remote#functions","content":" "},{"title":"FireClient​","type":1,"pageTitle":"Remote","url":"api/Remote#FireClient","content":"This item only works when running on the server. Server &lt;/&gt; Remote:FireClient( Player: Player , ...: any ) → () Fire the remote for the given player and any server scripts connected to the remote with the given arguments.  "},{"title":"FireAllClients​","type":1,"pageTitle":"Remote","url":"api/Remote#FireAllClients","content":"This item only works when running on the server. Server &lt;/&gt; Remote:FireAllClients(...: any) → () Fire the remote for all players and any server scripts connected to the remote with the given arguments.  "},{"title":"Connect​","type":1,"pageTitle":"Remote","url":"api/Remote#Connect","content":"&lt;/&gt; Remote:Connect(f: function) → RBXScriptConnection  Connect the remote to the provided function.  "},{"title":"Wait​","type":1,"pageTitle":"Remote","url":"api/Remote#Wait","content":"&lt;/&gt; Remote:Wait() → any Waits for the remote to be fired and returns the arguments it was fired with. "},{"title":"Example","type":0,"sectionRef":"#","url":"docs/example","content":"Example game.ServerStorage.Services.RandomService.lua: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Bridge = require(ReplicatedStorage.Bridge) local RandomService = Bridge.newService(script.Name) function RandomService:Construct() self.Random = Random.new(tick()) end function RandomService:Range(min, max) return self.Random:NextInteger(min, max) end return RandomService Copy game.ServerStorage.Services.PointsService.lua: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Players = game:GetService(&quot;Players&quot;) local Bridge = require(ReplicatedStorage.Bridge) local PointsService = Bridge.newService(script.Name) function PointsService:Construct() self.PlayerPoints = {} Players.PlayerAdded:Connect(function(Player) self.PlayerPoints[Player.UserId] = 0 end) for _, Player in pairs(Players:GetPlayers()) do self.PlayerPoints[Player.UserId] = 0 end end PointsService.Bridge.PointsChanged = Bridge.newRemote() function PointsService:Deploy() local RandomService = Bridge.toService(&quot;RandomService&quot;) while task.wait(1) do for _, Player in pairs(Players:GetPlayers()) do self.PlayerPoints[Player.UserId] += RandomService:Range(1, 100) self.Bridge.PointsChanged:FireClient(Player, self:GetPoints(Player)) end end end function PointsService:GetPoints(Player) return self.PlayerPoints[Player.UserId] end function PointsService.Bridge:GetPoints(Player) return self:GetPoints(Player) end Bridge.addInboundMiddleware(PointsService, function(serviceName, methodName, args) print(&quot;The&quot;, methodName, &quot;method of&quot;, serviceName, &quot;was called with args:&quot;, args) return args end) Bridge.addOutboundMiddleware(PointsService, function(serviceName, methodName, args) print(&quot;The&quot;, methodName, &quot;method of&quot;, serviceName, &quot;returned args:&quot;, args) return args end) return PointsService Copy Script: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local ServerStorage = game:GetService(&quot;ServerStorage&quot;) local Bridge = require(ReplicatedStorage.Bridge) for _, Service in pairs(ServerStorage.Services:GetChildren()) do require(Service) end Bridge.deploy(true) Copy game.ReplicatedStorage.Controllers.PointsController.lua: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Bridge = require(ReplicatedStorage.Bridge) local PointsController = Bridge.newController(script.Name) local PointsService = Bridge.toService(&quot;PointsService&quot;) function PointsController:Construct() self.Points = PointsService:GetPoints() self.Updated = Bridge.newSignal() PointsService.PointsChanged:Connect(function(newPoints) self.Points = newPoints self.Updated:Fire(newPoints) end) end function PointsController:GetPoints() return self.Points end return PointsController Copy game.ReplicatedStorage.Controllers.OtherController.lua: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Bridge = require(ReplicatedStorage.Bridge) local OtherController = Bridge.newController(script.Name) function OtherController:Deploy() local PointsController = Bridge.toController(&quot;PointsController&quot;) print(PointsController:GetPoints()) PointsController.Updated:Connect(function(newPoints) print(newPoints) end) end return OtherController Copy LocalScript: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Bridge = require(ReplicatedStorage.Bridge) for _, Controller in pairs(ReplicatedStorage.Controllers:GetChildren()) do require(Controller) end Bridge.addGlobalInboundMiddleware(function(controllerName, methodName, args) print(&quot;The&quot;, methodName, &quot;method of&quot;, controllerName, &quot;was called with args:&quot;, args) return args end) Bridge.deploy(true) Copy","keywords":""},{"title":"BridgeServer","type":0,"sectionRef":"#","url":"api/BridgeServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#types","content":" "},{"title":"MiddlewarePriorities​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#MiddlewarePriorities","content":"&lt;/&gt; interface MiddlewarePriorities { UniversalFirst: userdata UniversalLast: userdata }   "},{"title":"MiddlewarePriority​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#MiddlewarePriority","content":"&lt;/&gt; type MiddlewarePriority = userdata One of BridgeServer.MiddlewarePriorities. Use UniversalFirst to have universal middleware run before client/server middleware and UniversalLast to have client/server middleware run before universal middleware. Defaults to UniversalFirst if not specified.  "},{"title":"Service​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#Service","content":"&lt;/&gt; interface Service { Bridge: {Remote | function} Construct: function? Deploy: function? ...: Signal | function | any } Remotes and methods within the Bridge are accessible by clients! The construct function is run during deployment for each service asynchronously. The deploy function is run during deployment for all services synchronously. It is safe to access other controllers after the construct function has run.  "},{"title":"MiddlewareFunction​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#MiddlewareFunction","content":"&lt;/&gt; type MiddlewareFunction = ( serviceName: string, methodName: string, args: any ) → any All middleware functions are given the service name, method name and the arguments being passed to or returned from the method. To block the method from running or returning, simply throw an error. The middleware should return the arguments with any changes to be used by other middleware and the method. "},{"title":"Properties​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#properties","content":" "},{"title":"MiddlewarePriorities​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#MiddlewarePriorities","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BridgeServer.MiddlewarePriorities: MiddlewarePriorities  "},{"title":"Functions​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#functions","content":" "},{"title":"newSignal​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#newSignal","content":"&lt;/&gt; BridgeServer.newSignal() → Signal   "},{"title":"newRemote​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#newRemote","content":"&lt;/&gt; BridgeServer.newRemote() → Remote   "},{"title":"newService​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#newService","content":"&lt;/&gt; BridgeServer.newService( name: string, MiddlewarePriority: MiddlewarePriority? ) → Service   "},{"title":"toService​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#toService","content":"&lt;/&gt; BridgeServer.toService(serviceName: string) → Service Get another service to access it's methods. Must run BridgeServer.Deploy() first.  "},{"title":"addGlobalInboundMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addGlobalInboundMiddleware","content":"&lt;/&gt; BridgeServer.addGlobalInboundMiddleware(middleware: MiddlewareFunction) → () Add global inbound middleware, which will run before any method of any service is called. Note that global inbound middleware always runs first.  "},{"title":"addGlobalOutboundMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addGlobalOutboundMiddleware","content":"&lt;/&gt; BridgeServer.addGlobalOutboundMiddleware(middleware: MiddlewareFunction) → () Add global outbound middleware, which will run after any method of any service is called. Note that global outbound middleware always runs last.  "},{"title":"addInboundMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addInboundMiddleware","content":"&lt;/&gt; BridgeServer.addInboundMiddleware( Service: Service, middleware: MiddlewareFunction ) → () Add universal inbound middleware to the provided service, which will run before any method of that service is called.  "},{"title":"addInboundClientMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addInboundClientMiddleware","content":"&lt;/&gt; BridgeServer.addInboundClientMiddleware( Service: Service, middleware: MiddlewareFunction ) → () Add client inbound middleware to the provided service, which will run before any client method of that service is called.  "},{"title":"addInboundServerMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addInboundServerMiddleware","content":"&lt;/&gt; BridgeServer.addInboundServerMiddleware( Service: Service, middleware: MiddlewareFunction ) → () Add server inbound middleware to the provided service, which will run before any server method of that service is called.  "},{"title":"addOutboundMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addOutboundMiddleware","content":"&lt;/&gt; BridgeServer.addOutboundMiddleware( Service: Service, middleware: MiddlewareFunction ) → () Add universal outbound middleware to the provided service, which will run after any method of that service is called.  "},{"title":"addOutboundClientMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addOutboundClientMiddleware","content":"&lt;/&gt; BridgeServer.addOutboundClientMiddleware( Service: Service, middleware: MiddlewareFunction ) → () Add client outbound middleware to the provided service, which will run after any client method of that service is called.  "},{"title":"addOutboundServerMiddleware​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#addOutboundServerMiddleware","content":"&lt;/&gt; BridgeServer.addOutboundServerMiddleware( Service: Service, middleware: MiddlewareFunction ) → () Add server outbound middleware to the provided service, which will run after any server method of that service is called.  "},{"title":"deploy​","type":1,"pageTitle":"BridgeServer","url":"api/BridgeServer#deploy","content":"&lt;/&gt; BridgeServer.deploy(verbose: boolean?) → () Initialize, construct and deploy all services. "}]